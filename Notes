The Ruby on Rails Tutorial standardizes on the excellent cloud development environment Cloud9, part of Amazon Web Services (AWS).
 
Three essential components needed to develop web applications: a text editor, a filesystem navigator, and a command-line terminal.

As a general rule, you should refresh the file tree any time files or directories don’t appear as expected.

Rails enforces a separation between the data in the application (such as user information) and the code used to display it, 
which is a common way of structuring a graphical user interface (GUI). Follows the model-view-controller (MVC) architectural pattern

Notes on Git
More in https://linyi531.github.io/2018/07/16/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/
One time
$ git config --global user.name "Your Name"
$ git config --global user.email your.email@example.com

Each time
$ git init
$ git add -A
$ git status
$ git commit -m "Initialize repository"  /keep the change
$ git log
$ git checkout -f  /withdraw the misoperate

Push on Bitbucket
$ git remote add origin git@bitbucket.org:BomiaoChen/hello_app.git
$ git push -u origin master

Create a new topic branch by using checkout with the -b flag
$ git checkout -b modify-README
$ git branch
git branch, just lists all the local branches

Create a new topic branch
$ git checkout -b static-pages

Commit
$ git commit -a -m "Improve the README file"

Merge
$ git checkout master
$ git merge modify-README

Delete branch
$ git branch -d modify-README

For illustration only; don't do this unless you mess up a branch
$ git checkout -b topic-branch
$ <really mess up the branch>
$ git add -A
$ git commit -a -m "Make major mistake"
$ git checkout master
$ git branch -D topic-branch

if you have added any new files to the project since the last commit, 
you still have to tell Git about them using git add -A first.

All web application repositories should be private by default. 
Such repositories might contain potentially sensitive information such as cryptographic keys or passwords.
It is possible, of course, to arrange for this information to be handled securely (by having Git ignore it, for example), 
but this is error-prone and requires significant expertise.

heroku
$ source <(curl -sL https://cdn.learnenough.com/heroku_install)
If heroku not recognize, run above in Cloud9 terminal
$ heroku login
$ git push heroku master

The typical first step when making a web application is to create a data model, 
which is a representation of the structures needed by our application.

2018/12/11
Chapter 2 toy_app
MVC steps:
The browser issues a request for the /users URL.
Rails routes /users to the index action in the Users controller.
The index action asks the User model to retrieve all users (User.all).
The User model pulls all the users from the database.
The User model returns the list of users to the controller.
The controller captures the users in the @users variable, which is passed to the index view.
The view uses embedded Ruby to render the page as HTML.
The controller passes the HTML back to the browser.3

2018/12/12
Undoing generation
$ rails generate controller StaticPages home help
$ rails destroy  controller StaticPages home help

Undoing migration
$ rails db:migrate
$ rails db:rollback
$ rails db:migrate VERSION=0

Red Green Refactor eg.
We’ll be using the full “Red, Green, Refactor” cycle: 
first by adding simple tests for our page titles (red), 
then by adding titles to each of our three pages (green), 
and finally using a layout file to eliminate duplication (Refactor).

$ rails test
$ git push heroku
Test before push, which is a good habit.

.empty?

>> "fooxbarxbaz".split('x')
=> ["foo", "bar", "baz"]

a.sort! Use ! to change a

a[0..2] .. => range

@name and @email are both instance variables
Three main features about the asset pipeline: asset directories, manifest files, and preprocessor engines.

check using the errors object generated on failure
>> user.errors.full_messages

Making strings into Array
>> %w[foo bar baz]
=> ["foo", "bar", "baz"]

Using debugger to check

> helper.pluralize(1, "error")
=> "1 error"

Rails comes with three standard environments: development, test, and production.

Rails can maintain state from one page to the next using temporary cookies via the session method.
Using the session method, we can securely place a user id on the browser to create a temporary session.

assert_equal <expected>, <actual>
