2018/12/11

1.1.1

1. RubyGems.org is the Ruby community's gem hosting service.
2. 5.2.2 - December 04, 2018 (6.5 KB)
3. 153,201,723

1.3.2

1. ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
2. Rails 5.2.1.1. It is not matched with what I installed.
Reason: (Different Directory)
    ec2-user:~ $ rails -v
    Rails 5.2.1.1
    ec2-user:~/environment/hello_app (master) $ rails -v
    Rails 5.1.6

1.3.4
1. change hello world into hola mundo
2. Â¡Hola, mundo! can be shown on Rails

1.5.3
1. change def in application_controller, save commit push
2. Same

1.5.4
1. logs            display recent log output
2.2018-12-11T09:26:26.401030+00:00 app[web.1]: I, [2018-12-11T09:26:26.400963 #4]  INFO -- : 
[774b8b69-e3a1-4908-97ee-b9dd7988654b] Completed 200 OK in 9ms (Views: 7.9ms)

2.2.1
2. User was successfully created.
3. User was successfully created.
4. There is a window showing are you sure?

2.2.2
1. NEED TO BE DEFINED
The browser issues a request (GET) for the /users/1/edit URL.
Rails routes /users/1 to the index action in the Users controller.
The index action asks the User model to edit user 1.
The User model pulls user 1 from the database.
The User model returns user 1 to the controller.
The controller captures the user 1 in the @users variable, which is passed to the index view.
The view uses embedded Ruby to render the page as HTML.
The controller passes the HTML back to the browser.
2.
  def set_user
    @user = User.find(params[:id])
  end
3. edit.html.erb

2.3.1
2.
Micropost was successfully created.
Content:
User:
3.
Micropost was successfully created.
Content: Ruby is said to follow the principle of least astonishment (POLA), 
meaning that the language should behave in such a way as to minimize confusion for experienced users. 
Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, 
by minimizing programmer work and possible confusion. He has said that he had not applied the principle 
of least astonishment to the design of Ruby,[83] but nevertheless the phrase has come to be closely associated 
with the Ruby programming language. The phrase has itself been a source of surprise, as novice users may take 
it to mean that Ruby's behaviors try to closely match behaviors familiar from other languages. In a May 2005 
discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that 
because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. 
If that personal standard remains consistent, there would be few surprises for those familiar with the standard.
User:
4.

2.3.2
1. 1 error prohibited this micropost from being saved:
    Content is too long (maximum is 140 characters)
2. error_explanation

2.3.3
1.
<p>
  <strong>Micropost:</strong>
  <%= @user.microposts.first.content %>
</p>
2.
User must exist
Content can't be blank
3.
Name can't be blank
Email can't be blank

2.3.4
1. class ApplicationController < ActionController::Base
2. 
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

2.3.5
1.
2.
3. It works


3.1
1. Working!
2. Succeeded!

3.2.1
1.
create  app/controllers/foo_controller.rb
 route  get 'foo/bar'
 route  get 'foo/foo'
2.
remove  app/controllers/foo_controller.rb
 route  get 'foo/bar'
 route  get 'foo/foo'

3.4.2
1. 3 runs, 6 assertions, 0 failures, 0 errors, 0 skips

3.4.4
1.
test "should get root" do
  get static_pages_home_url
  assert_response :success
end
2. From this exercise knowing 1 should get root_url
test "should get root" do
  get root_url
  assert_response :success
end
